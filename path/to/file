class MidiController {
  constructor(knob, slider) {
    // ... existing code ...
    this.knobVariables = Object.keys(knob); // Get variable names for knobs
    // ... existing code ...
  }

  initializeValues() {
    // Set initial values based on the current state of the MIDI knobs and sliders
    for (let i = 0; i < this.midiKnobInputs.length; i++) {
      this.lastValues[i] = this.knob[this.knobVariables[i]] || 0; // Initialize last values for knobs
      this.values[i] = this.lastValues[i]; // Set initial values for knobs
    }
  }

  handleMidiMessage(message) {
    // ... existing code ...
    const knobIndex = this.midiKnobInputs.indexOf(data1);
    // ... existing code ...
      this.knob[this.knobVariables[knobIndex]] = this.values[knobIndex]; // Update the variable in the object
    // ... existing code ...
  }

  displayValues() {
    // ... existing code ...
      for (let i = 0; i < this.knobVariables.length; i++) {
        const variableName = this.knobVariables[i];
        const variableValue = this.knob[variableName]; // Access the value from the object
        // ... existing code ...
      }
    // ... existing code ...
  }
} 